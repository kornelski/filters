var N = null;var searchIndex = {};
searchIndex["filters"]={"doc":"A library for constructing predicates and filters for `Iterator::filter`","items":[[0,"impl_traits","filters","",N,N],[0,"filter","","The filter implementation",N,N],[8,"IntoFilter","filters::filter","Trait for converting something into a Filter",N,N],[16,"IntoFilt","","",0,N],[10,"into_filter","","",0,N],[8,"Filter","","The filter trait",N,N],[10,"filter","","The function which is used to filter something",1,[[["self"],["n"]],["bool"]]],[11,"not","","Helper to invert a filter.",1,[[["self"]],["not"]]],[11,"or","","Helper to connect two filters via logical OR",1,[[["self"],["f"]],["or"]]],[11,"or_not","","Helper to connect two filters via logical OR and NOT",1,[[["self"],["f"]],["or",["not"]]]],[11,"or3","","Helper to connect three filters via logical OR",1,[[["self"],["f"],["f2"]],["or",["or"]]]],[11,"nor","","Helper to connect two filters via logical NOR",1,[[["self"],["f"]],["not",["or"]]]],[11,"xor","","Helper to connect two filters via logical XOR",1,[[["self"],["f"]],["xor"]]],[11,"and","","Helper to connect two filters via logical AND",1,[[["self"],["f"]],["and"]]],[11,"and3","","Helper to connect three filters via logical AND",1,[[["self"],["f"],["f2"]],["and",["and"]]]],[11,"and_not","","Helper to connect two filters via logical AND and NOT",1,[[["self"],["f"]],["and",["not"]]]],[11,"nand","","Helper to connect two filters via logical NAND",1,[[["self"],["f"]],["not",["and"]]]],[11,"map_input","","Helper to transform the input of a filter",1,[[["self"],["m"]],["mapinput"]]],[11,"into_failable","","Helper to transform a filter into a FailableFilter",1,[[["self"]],["intofailable"]]],[11,"as_failable","","Helper to borrow a filter as a FailbleFilter",1,[[["self"]],["asfailable"]]],[0,"failable","filters","",N,N],[0,"filter","filters::failable","",N,N],[8,"IntoFailableFilter","filters::failable::filter","Trait for converting something into a Filter",N,N],[16,"IntoFilt","","",2,N],[10,"into_failable_filter","","",2,N],[8,"FailableFilter","","",N,N],[16,"Error","","",3,N],[10,"filter","","The function which is used to filter something",3,[[["self"],["n"]],["result",["bool"]]]],[11,"not","","Helper to invert a filter.",3,[[["self"]],["failablenot"]]],[11,"or","","Helper to connect two filters via logical OR",3,[[["self"],["f"]],["failableor"]]],[11,"or_not","","Helper to connect two filters via logical OR and NOT",3,[[["self"],["f"]],["failableor",["failablenot"]]]],[11,"or3","","Helper to connect three filters via logical OR",3,[[["self"],["f"],["f2"]],["failableor",["failableor"]]]],[11,"nor","","Helper to connect two filters via logical NOR",3,[[["self"],["f"]],["failablenot",["failableor"]]]],[11,"xor","","Helper to connect two filters via logical XOR",3,[[["self"],["f"]],["failablexor"]]],[11,"and","","Helper to connect two filters via logical AND",3,[[["self"],["f"]],["failableand"]]],[11,"and3","","Helper to connect three filters via logical AND",3,[[["self"],["f"],["f2"]],["failableand",["failableand"]]]],[11,"and_not","","Helper to connect two filters via logical AND and NOT",3,[[["self"],["f"]],["failableand",["failablenot"]]]],[11,"nand","","Helper to connect two filters via logical NAND",3,[[["self"],["f"]],["failablenot",["failableand"]]]],[11,"map_input","","Helper to transform the input of a filter",3,[[["self"],["m"]],["failablemapinput"]]],[11,"map_err","","Helper to transform the input of a filter",3,[[["self"],["m"]],["failablemaperr"]]],[0,"ops","filters::failable","",N,N],[0,"and","filters::failable::ops","AND implementation.",N,N],[3,"FailableAnd","filters::failable::ops::and","",N,N],[11,"new","","",4,[[["t"],["u"]],["failableand"]]],[0,"bool","filters::failable::ops","FailableBool Filter implementation, so we can insert this in filter construction",N,N],[3,"FailableBool","filters::failable::ops::bool","",N,N],[11,"new","","",5,[[["bool"]],["failablebool"]]],[0,"not","filters::failable::ops","NOT implementation.",N,N],[3,"FailableNot","filters::failable::ops::not","",N,N],[11,"new","","",6,[[["t"]],["failablenot"]]],[0,"xor","filters::failable::ops","XOR implementation.",N,N],[3,"FailableXOr","filters::failable::ops::xor","",N,N],[11,"new","","",7,[[["t"],["u"]],["failablexor"]]],[0,"or","filters::failable::ops","OR implementation.",N,N],[3,"FailableOr","filters::failable::ops::or","",N,N],[11,"new","","",8,[[["t"],["u"]],["failableor"]]],[0,"map","filters::failable::ops","Map implementation.",N,N],[3,"FailableMapInput","filters::failable::ops::map","",N,N],[3,"FailableMapErr","","",N,N],[11,"new","","",9,[[["f"],["m"]],["failablemapinput"]]],[11,"new","","",10,[[["f"],["m"]],["failablemaperr"]]],[0,"iter","filters","",N,N],[3,"FilteredIterator","filters::iter","",N,N],[3,"FilterOksIter","","",N,N],[3,"FilterErrIter","","",N,N],[8,"FilterWith","","",N,N],[10,"filter_with","","",11,[[["self"],["f"]],["filterediterator"]]],[8,"FilterOks","","",N,N],[10,"filter_oks","","",12,[[["self"],["f"]],["filteroksiter"]]],[8,"FilterErr","","",N,N],[10,"filter_errs","","",13,[[["self"],["f"]],["filtererriter"]]],[0,"ops","filters","",N,N],[0,"and","filters::ops","AND implementation.",N,N],[3,"And","filters::ops::and","",N,N],[11,"new","","",14,[[["t"],["u"]],["and"]]],[0,"bool","filters::ops","Bool Filter implementation, so we can insert this in filter construction",N,N],[3,"Bool","filters::ops::bool","",N,N],[11,"new","","",15,[[["bool"]],["bool"]]],[0,"not","filters::ops","NOT implementation.",N,N],[3,"Not","filters::ops::not","",N,N],[11,"new","","",16,[[["t"]],["not"]]],[0,"or","filters::ops","OR implementation.",N,N],[3,"Or","filters::ops::or","",N,N],[11,"new","","",17,[[["t"],["u"]],["or"]]],[0,"xor","filters::ops","XOR implementation.",N,N],[3,"XOr","filters::ops::xor","",N,N],[11,"new","","",18,[[["t"],["u"]],["xor"]]],[0,"map","filters::ops","Map implementation.",N,N],[3,"MapInput","filters::ops::map","",N,N],[11,"new","","",19,[[["f"],["m"]],["mapinput"]]],[0,"failable","filters::ops","Filter -> FailableFilter implementations",N,N],[3,"IntoFailable","filters::ops::failable","",N,N],[3,"AsFailable","","",N,N],[11,"new","","",20,[[["f"]],["intofailable"]]],[11,"new","","",21,[[["f"]],["asfailable"]]],[14,"impl_operators","filters","Creates operator implementations for a Filter struct Currently only Fn and Filter implementations are handled",N,N],[14,"impl_failable_operators","","Variant of impl_operators!() macro for FailableFilter types",N,N],[14,"make_filter","","",N,N],[11,"into_failable_filter","filters::failable::ops::and","",4,N],[11,"filter","","",4,[[["self"],["i"]],["result",["bool"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_failable_filter","filters::failable::ops::bool","",5,N],[11,"filter","","",5,[[["self"],["i"]],["result",["bool"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_failable_filter","filters::failable::ops::not","",6,N],[11,"filter","","",6,[[["self"],["i"]],["result",["bool"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"into_failable_filter","filters::failable::ops::xor","",7,N],[11,"filter","","",7,[[["self"],["i"]],["result",["bool"]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_failable_filter","filters::failable::ops::or","",8,N],[11,"filter","","",8,[[["self"],["i"]],["result",["bool"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"into_failable_filter","filters::failable::ops::map","",9,N],[11,"filter","","",9,[[["self"],["i"]],["result",["bool"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into_failable_filter","","",10,N],[11,"filter","","",10,[[["self"],["i"]],["result",["bool"]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"filter_with","filters::iter","",22,[[["self"],["f"]],["filterediterator"]]],[11,"filter_oks","","",22,[[["self"],["f"]],["filteroksiter"]]],[11,"filter_errs","","",22,[[["self"],["f"]],["filtererriter"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"filter_with","","",23,[[["self"],["f"]],["filterediterator"]]],[11,"filter_oks","","",23,[[["self"],["f"]],["filteroksiter"]]],[11,"filter_errs","","",23,[[["self"],["f"]],["filtererriter"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"into_iter","","",23,[[["self"]],["i"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"filter_with","","",24,[[["self"],["f"]],["filterediterator"]]],[11,"filter_oks","","",24,[[["self"],["f"]],["filteroksiter"]]],[11,"filter_errs","","",24,[[["self"],["f"]],["filtererriter"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"into_iter","","",24,[[["self"]],["i"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"into_filter","filters::ops::and","",14,[[["self"]],["i"]]],[11,"filter","","",14,[[["self"],["i"]],["bool"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"into_filter","filters::ops::bool","",15,[[["self"]],["i"]]],[11,"filter","","",15,[[["self"],["i"]],["bool"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"into_filter","filters::ops::not","",16,[[["self"]],["i"]]],[11,"filter","","",16,[[["self"],["i"]],["bool"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"into_filter","filters::ops::or","",17,[[["self"]],["i"]]],[11,"filter","","",17,[[["self"],["i"]],["bool"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into_filter","filters::ops::xor","",18,[[["self"]],["i"]]],[11,"filter","","",18,[[["self"],["i"]],["bool"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into_filter","filters::ops::map","",19,[[["self"]],["i"]]],[11,"filter","","",19,[[["self"],["i"]],["bool"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into_failable_filter","filters::ops::failable","",20,N],[11,"filter","","",20,[[["self"],["i"]],["result",["bool"]]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"into_failable_filter","","",21,N],[11,"filter","","",21,[[["self"],["i"]],["result",["bool"]]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"filter","filters::ops::and","",14,[[["self"],["i"]],["bool"]]],[11,"filter","filters::ops::bool","",15,[[["self"],["i"]],["bool"]]],[11,"filter","filters::ops::not","",16,[[["self"],["i"]],["bool"]]],[11,"filter","filters::ops::or","",17,[[["self"],["i"]],["bool"]]],[11,"filter","filters::ops::xor","",18,[[["self"],["i"]],["bool"]]],[11,"filter","filters::ops::map","",19,[[["self"],["t"]],["bool"]]],[11,"filter","filters::failable::ops::and","",4,[[["self"],["n"]],["result",["bool"]]]],[11,"filter","filters::failable::ops::bool","",5,[[["self"],["n"]],["result",["bool"]]]],[11,"filter","filters::failable::ops::not","",6,[[["self"],["n"]],["result",["bool"]]]],[11,"filter","filters::failable::ops::xor","",7,[[["self"],["n"]],["result",["bool"]]]],[11,"filter","filters::failable::ops::or","",8,[[["self"],["n"]],["result",["bool"]]]],[11,"filter","filters::failable::ops::map","",9,[[["self"],["t"]],["result",["bool"]]]],[11,"filter","","",10,[[["self"],["t"]],["result",["bool"]]]],[11,"filter","filters::ops::failable","",20,[[["self"],["n"]],["result",["bool"]]]],[11,"filter","","",21,[[["self"],["n"]],["result",["bool"]]]],[11,"clone","filters::failable::ops::and","",4,[[["self"]],["failableand"]]],[11,"clone","filters::failable::ops::bool","",5,[[["self"]],["failablebool"]]],[11,"clone","filters::failable::ops::not","",6,[[["self"]],["failablenot"]]],[11,"clone","filters::failable::ops::xor","",7,[[["self"]],["failablexor"]]],[11,"clone","filters::failable::ops::or","",8,[[["self"]],["failableor"]]],[11,"clone","filters::failable::ops::map","",9,[[["self"]],["failablemapinput"]]],[11,"clone","","",10,[[["self"]],["failablemaperr"]]],[11,"clone","filters::ops::and","",14,[[["self"]],["and"]]],[11,"clone","filters::ops::bool","",15,[[["self"]],["bool"]]],[11,"clone","filters::ops::not","",16,[[["self"]],["not"]]],[11,"clone","filters::ops::or","",17,[[["self"]],["or"]]],[11,"clone","filters::ops::xor","",18,[[["self"]],["xor"]]],[11,"clone","filters::ops::map","",19,[[["self"]],["mapinput"]]],[11,"clone","filters::ops::failable","",20,[[["self"]],["intofailable"]]],[11,"clone","","",21,[[["self"]],["asfailable"]]],[11,"from","filters::failable::ops::bool","",5,[[["bool"]],["failablebool"]]],[11,"from","filters::ops::bool","",15,[[["bool"]],["bool"]]],[11,"next","filters::iter","",22,[[["self"]],["option"]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"next","","",24,[[["self"]],["option"]]]],"paths":[[8,"IntoFilter"],[8,"Filter"],[8,"IntoFailableFilter"],[8,"FailableFilter"],[3,"FailableAnd"],[3,"FailableBool"],[3,"FailableNot"],[3,"FailableXOr"],[3,"FailableOr"],[3,"FailableMapInput"],[3,"FailableMapErr"],[8,"FilterWith"],[8,"FilterOks"],[8,"FilterErr"],[3,"And"],[3,"Bool"],[3,"Not"],[3,"Or"],[3,"XOr"],[3,"MapInput"],[3,"IntoFailable"],[3,"AsFailable"],[3,"FilteredIterator"],[3,"FilterOksIter"],[3,"FilterErrIter"]]};
initSearch(searchIndex);
